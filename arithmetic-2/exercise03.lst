


ARM Macro Assembler    Page 1 Memory, Conditional Branching, and Debugging Tools


    1 00000000                 TTL              Memory, Conditional Branching, 
and Debugging Tools
    2 00000000         
    3 00000000         ;*******************************************************
                       *********
    4 00000000         ;this program evaluates a system of equations with three
                       
    5 00000000         ;input variables and then sums their result. 
    6 00000000         ; 
    7 00000000         ;Name:Justin Peterson
    8 00000000         ;Date:09/10/2015
    9 00000000         ;Class:CMPE-250
   10 00000000         ;Section:03 - TR 2-4 PM
   11 00000000         ;-------------------------------------------------------
                       --------
   12 00000000         ;Keil Simulator Template for KL46
   13 00000000         ;R. W. Melton
   14 00000000         ;January 23, 2015
   15 00000000         ;*******************************************************
                       *********
   16 00000000         ;Assembler directives
   17 00000000                 THUMB
   19 00000000         ;*******************************************************
                       *********
   20 00000000         ;EQUates
   21 00000000         ;Vectors
   22 00000000 000000C0 
                       VECTOR_TABLE_SIZE
                               EQU              0x000000C0
   23 00000000 00000004 
                       VECTOR_SIZE
                               EQU              4           ;Bytes per vector
   24 00000000         
   25 00000000         ;Shift Amounts
   26 00000000         ;*******************************************************
                       *********
   27 00000000 00000001 
                       MULT2   EQU              1           ;Logical shift by 1
                                                             = 2^1 = 2
   28 00000000 00000002 
                       MULT4   EQU              2           ;Logical shift by 2
                                                             = 2^2 = 4
   29 00000000 00000018 
                       SHIFT24 EQU              24          ;Logical shift by 2
                                                            4 bits. Conv to mos
                                                            t sig. word
   30 00000000         
   31 00000000         ;Stack
   32 00000000 00000100 
                       SSTACK_SIZE
                               EQU              0x00000100
   33 00000000         ;*******************************************************
                       *********
   34 00000000         ;Program
   35 00000000         ;Linker requires Reset_Handler
   36 00000000                 AREA             MyCode,CODE,READONLY
   37 00000000                 ENTRY
   38 00000000                 EXPORT           Reset_Handler
   39 00000000         Reset_Handler



ARM Macro Assembler    Page 2 Memory, Conditional Branching, and Debugging Tools


   40 00000000         main
   41 00000000         ;-------------------------------------------------------
                       --------
   42 00000000         ;>>>>> begin main program code <<<<<
   43 00000000         
   44 00000000         ;Load memory addresses for P, Q, R, and result
   45 00000000 4936            LDR              R1, =P
   46 00000002 4A37            LDR              R2, =Q
   47 00000004 4B37            LDR              R3, =R
   48 00000006 4F38            LDR              R7, =result
   49 00000008         
   50 00000008         ;Load variable values from addresses into registers
   51 00000008 6809            LDR              R1, [R1, #0]
   52 0000000A 6812            LDR              R2, [R2, #0]
   53 0000000C 681B            LDR              R3, [R3, #0]
   54 0000000E 683F            LDR              R7, [R7, #0]
   55 00000010         
   56 00000010         ;Compute for F [2P - 3Q + R + 51]
   57 00000010         ;--------------------------------------
   58 00000010 2400            MOVS             R4, #0      ; Initalize R4 to Z
                                                            ero
   59 00000012         
   60 00000012 004D            LSLS             R5, R1, #MULT2 
                                                            ; Multiply P by 2
   61 00000014         
   62 00000014         ;If op results in > 127 or < -128
   63 00000014         ;Set final to zero and return
   64 00000014 2D7F            CMP              R5, #127    ; Compare to 127
   65 00000016 DC17            BGT              ENDF
   66 00000018 2D80            CMN              R5, #-128   ; Compare to -128
   67 0000001A DC15            BGT              ENDF
   68 0000001C         
   69 0000001C 0056            LSLS             R6, R2, #MULT2 
                                                            ; Multiply Q by 2
   70 0000001E 18B6            ADDS             R6, R6, R2  ; Add Q to 2Q to ma
                                                            ke 3Q
   71 00000020         
   72 00000020         ;If op results in > 127 or < -128
   73 00000020         ;Set final to zero and return
   74 00000020 2D7F            CMP              R5, #127    ; Compare to 127
   75 00000022 DC11            BGT              ENDF
   76 00000024 2D80            CMN              R5, #-128   ; Compare to -128
   77 00000026 DC0F            BGT              ENDF
   78 00000028         
   79 00000028 1BAD            SUBS             R5, R5, R6  ; R5 = 2P - 3Q
   80 0000002A         
   81 0000002A         ;If op results in > 127 or < -128
   82 0000002A         ;Set final to zero and return
   83 0000002A 2D7F            CMP              R5, #127    ; Compare to 127
   84 0000002C DC0C            BGT              ENDF
   85 0000002E 2D80            CMN              R5, #-128   ; Compare to -128
   86 00000030 DC0A            BGT              ENDF
   87 00000032         
   88 00000032 18ED            ADDS             R5, R5, R3  ; Add R to (2P - 3Q
                                                            )
   89 00000034         
   90 00000034         ;If op results in > 127 or < -128
   91 00000034         ;Set final to zero and return
   92 00000034 2D7F            CMP              R5, #127    ; Compare to 127



ARM Macro Assembler    Page 3 Memory, Conditional Branching, and Debugging Tools


   93 00000036 DC07            BGT              ENDF
   94 00000038 2D80            CMN              R5, #-128   ; Compare to -128
   95 0000003A DC05            BGT              ENDF
   96 0000003C         
   97 0000003C 3533            ADDS             R5, R5, #51 ; Add 51 to final r
                                                            esult
   98 0000003E         
   99 0000003E         ;If op results in > 127 or < -128
  100 0000003E         ;Set final to zero and return
  101 0000003E 2D7F            CMP              R5, #127    ; Compare to 127
  102 00000040 DC02            BGT              ENDF
  103 00000042 2D80            CMN              R5, #-128   ; Compare to -128
  104 00000044 DC00            BGT              ENDF
  105 00000046         
  106 00000046 002C            MOVS             R4, R5      ; If all goes well,
                                                             move R5 to R4
  107 00000048         
  108 00000048         ENDF
  109 00000048 4E28            LDR              R6, =F      ; R6 <- &F
  110 0000004A 6034            STR              R4, [R6, #0] ; F <- R4
  111 0000004C         
  112 0000004C         
  113 0000004C         ;Compute for G [5P - 4Q -2R + 7]
  114 0000004C         ;Shifting to most significant byte
  115 0000004C         ;to simulate and check for overflow
  116 0000004C         ;-----------------------------------------
  117 0000004C         
  118 0000004C 2400            MOVS             R4, #0      ; Refresh state of 
                                                            R4
  119 0000004E         
  120 0000004E 008D            LSLS             R5, R1, #MULT4 ; R5 = 4 * P
  121 00000050         
  122 00000050 186D            ADDS             R5, R5, R1  ; R5 = 4P + P = 5P
  123 00000052         
  124 00000052 0096            LSLS             R6, R2, #MULT4 ; R6 = 4Q
  125 00000054 005F            LSLS             R7, R3, #MULT2 ; R7 = 2R
  126 00000056         
  127 00000056         ;Shift P, Q, and R to most significant byte
  128 00000056 062D            LSLS             R5, R5, #SHIFT24
  129 00000058 0636            LSLS             R6, R6, #SHIFT24
  130 0000005A 063F            LSLS             R7, R7, #SHIFT24
  131 0000005C         
  132 0000005C 1BAD            SUBS             R5, R5, R6  ; R5 = 5P - 4Q
  133 0000005E D60D            BVS              ENDG        ; Check for overflo
                                                            w
  134 00000060         
  135 00000060 1BED            SUBS             R5, R5, R7  ; R5 = R5 - 2R
  136 00000062 D60B            BVS              ENDG        ; Check for overflo
                                                            w
  137 00000064         
  138 00000064         ;In order to add 7, shift left 24 bits, add, and check 
  139 00000064 2607            MOVS             R6, #7
  140 00000066 0636            LSLS             R6, R6, #SHIFT24
  141 00000068 19AD            ADDS             R5, R5, R6  ; R5 = R5 + (shift)
                                                             7
  142 0000006A D607            BVS              ENDG        ; Check for overflo
                                                            w
  143 0000006C         
  144 0000006C 008D            LSLS             R5, R1, #MULT4 ; R5 = 4 * P



ARM Macro Assembler    Page 4 Memory, Conditional Branching, and Debugging Tools


  145 0000006E 186D            ADDS             R5, R5, R1  ; R5 = 4P + P = 5P
  146 00000070         
  147 00000070 0096            LSLS             R6, R2, #MULT4 ; R6 = 4Q
  148 00000072 005F            LSLS             R7, R3, #MULT2 ; R7 = 2R
  149 00000074         
  150 00000074 1BAD            SUBS             R5, R5, R6  ; R5 = 5P - 4Q
  151 00000076 1BED            SUBS             R5, R5, R7  ; R5 = R5 - 2R
  152 00000078 1DED            ADDS             R5, R5, #7  ; R5 = R5 + 7
  153 0000007A         
  154 0000007A 002C            MOVS             R4, R5      ; If all goes well,
                                                             move R5 to R4
  155 0000007C         
  156 0000007C         ENDG
  157 0000007C 4E1C            LDR              R6, =G      ; R6 <- &G
  158 0000007E 6034            STR              R4, [R6, #0] ; G <- R4
  159 00000080         
  160 00000080         
  161 00000080         ;Compute for H [P - 2Q + R - 91]
  162 00000080         ;-----------------------------------------
  163 00000080 000D            MOVS             R5, R1      ; Move P into R5
  164 00000082 0056            LSLS             R6, R2, #MULT2 ; R6 = 2Q
  165 00000084         
  166 00000084         ;If op results in > 127 or < -128
  167 00000084         ;Set final to zero and return
  168 00000084 2E7F            CMP              R6, #127    ; Compare to 127
  169 00000086 DC12            BGT              ENDH
  170 00000088 2E80            CMN              R6, #-128   ; Compare to -128
  171 0000008A DC10            BGT              ENDH
  172 0000008C         
  173 0000008C 001F            MOVS             R7, R3      ; Move R into R7
  174 0000008E         
  175 0000008E 1BAD            SUBS             R5, R5, R6  ; R5 = P - 2Q
  176 00000090         
  177 00000090         ;If op results in > 127 or < -128
  178 00000090         ;Set final to zero and return
  179 00000090 2D7F            CMP              R5, #127    ; Compare to 127
  180 00000092 DC0C            BGT              ENDH
  181 00000094 2D80            CMN              R5, #-128   ; Compare to -128
  182 00000096 DC0A            BGT              ENDH
  183 00000098         
  184 00000098 19ED            ADDS             R5, R5, R7  ; R5 = R5 + R
  185 0000009A         
  186 0000009A         ;If op results in > 127 or < -128
  187 0000009A         ;Set final to zero and return
  188 0000009A 2D7F            CMP              R5, #127    ; Compare to 127
  189 0000009C DC07            BGT              ENDH
  190 0000009E 2D80            CMN              R5, #-128   ; Compare to -128
  191 000000A0 DC05            BGT              ENDH
  192 000000A2         
  193 000000A2 3D5B            SUBS             R5, R5, #91 ; R5 = R5 - 91
  194 000000A4         
  195 000000A4         ;If op results in > 127 or < -128
  196 000000A4         ;Set final to zero and return
  197 000000A4         
  198 000000A4 2D7F            CMP              R5, #127    ; Compare to 127
  199 000000A6 DC02            BGT              ENDH
  200 000000A8 2D80            CMN              R5, #-128   ; Compare to -128
  201 000000AA DC00            BGT              ENDH
  202 000000AC         



ARM Macro Assembler    Page 5 Memory, Conditional Branching, and Debugging Tools


  203 000000AC 002C            MOVS             R4, R5      ; If all goes well,
                                                             move R5 to R4
  204 000000AE         
  205 000000AE         ENDH
  206 000000AE 4E11            LDR              R6, =H      ; R6 <- &H
  207 000000B0 6034            STR              R4, [R6, #0] ; H <- R4
  208 000000B2         
  209 000000B2         
  210 000000B2         ;Compute for result [F + G + H]
  211 000000B2         ;-----------------------------------------
  212 000000B2 490E            LDR              R1, =F
  213 000000B4 4A0E            LDR              R2, =G
  214 000000B6 4B0F            LDR              R3, =H
  215 000000B8         
  216 000000B8 6809            LDR              R1, [R1, #0]
  217 000000BA 6812            LDR              R2, [R2, #0]
  218 000000BC 681B            LDR              R3, [R3, #0]
  219 000000BE         
  220 000000BE 188D            ADDS             R5, R1, R2  ; R5 <- F + G
  221 000000C0         
  222 000000C0         ;If op results in > 127 or < -128
  223 000000C0         ;Set final to zero and return
  224 000000C0 2D7F            CMP              R5, #127    ; Compare to 127
  225 000000C2 DC07            BGT              ENDRESULT
  226 000000C4 2D80            CMN              R5, #-128   ; Compare to -128
  227 000000C6 DC05            BGT              ENDRESULT
  228 000000C8         
  229 000000C8 18ED            ADDS             R5, R5, R3  ; R5 <- F + G + H
  230 000000CA         
  231 000000CA         ;If op results in > 127 or < -128
  232 000000CA         ;Set final to zero and return
  233 000000CA 2D7F            CMP              R5, #127    ; Compare to 127
  234 000000CC DC02            BGT              ENDRESULT
  235 000000CE 2D80            CMN              R5, #-128   ; Compare to -128
  236 000000D0 DC00            BGT              ENDRESULT
  237 000000D2         
  238 000000D2 002C            MOVS             R4, R5      ; If all goes well,
                                                             move R5 to R4
  239 000000D4         
  240 000000D4         ENDRESULT
  241 000000D4 4E04            LDR              R6, =result ; R6 <- &result
  242 000000D6 6034            STR              R4, [R6, #0] ; result <- R4
  243 000000D8         
  244 000000D8         
  245 000000D8         ;>>>>>   end main program code <<<<<
  246 000000D8         ;Stay here
  247 000000D8 E7FE            B                .
  248 000000DA         ;-------------------------------------------------------
                       --------
  249 000000DA         ;>>>>> begin subroutine code <<<<<
  250 000000DA         ;>>>>>   end subroutine code <<<<<
  251 000000DA 00 00           ALIGN
  252 000000DC         ;*******************************************************
                       *********
  253 000000DC         ;Vector Table Mapped to Address 0 at Reset
  254 000000DC         ;Linker requires __Vectors to be exported
  255 000000DC 00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 6 Memory, Conditional Branching, and Debugging Tools


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         AREA             RESET, DATA, READONLY
  256 00000000                 EXPORT           __Vectors
  257 00000000                 EXPORT           __Vectors_End
  258 00000000                 EXPORT           __Vectors_Size
  259 00000000         __Vectors
  260 00000000         ;ARM core vectors
  261 00000000 00000000        DCD              __initial_sp ;00:end of stack
  262 00000004 00000000        DCD              Reset_Handler ;reset vector
  263 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 7 Memory, Conditional Branching, and Debugging Tools


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00               SPACE            (VECTOR_TABLE_SIZE - (2 * VECTO
R_SIZE))
  264 000000C0         __Vectors_End
  265 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
  266 000000C0                 ALIGN
  267 000000C0         ;*******************************************************
                       *********
  268 000000C0         ;Constants
  269 000000C0                 AREA             MyConst,DATA,READONLY
  270 00000000         ;>>>>> begin constants here <<<<<
  271 00000000 00000033 
                       const_F DCD              51
  272 00000004 00000007 
                       const_G DCD              7
  273 00000008 FFFFFFA5 
                       const_H DCD              -91
  274 0000000C         ;>>>>>   end constants here <<<<<
  275 0000000C         ;*******************************************************
                       *********
  276 0000000C                 AREA             |.ARM.__at_0x1FFFE000|,DATA,REA
DWRITE,ALIGN=3
  277 00000000                 EXPORT           __initial_sp
  278 00000000         ;Allocate system stack
  279 00000000                 IF               :LNOT::DEF:SSTACK_SIZE
  281                          ENDIF
  282 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 8 Memory, Conditional Branching, and Debugging Tools


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 9 Memory, Conditional Branching, and Debugging Tools


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       Stack_Mem
                               SPACE            SSTACK_SIZE
  283 00000100         __initial_sp
  284 00000100         ;*******************************************************
                       *********
  285 00000100         ;Variables
  286 00000100                 AREA             MyData,DATA,READWRITE
  287 00000000         ;>>>>> begin variables here <<<<<
  288 00000000 00 00 00 
              00       F       SPACE            4
  289 00000004 00 00 00 
              00       G       SPACE            4
  290 00000008 00 00 00 
              00       H       SPACE            4
  291 0000000C 00 00 00 
              00       P       SPACE            4
  292 00000010 00 00 00 
              00       Q       SPACE            4
  293 00000014 00 00 00 
              00       R       SPACE            4
  294 00000018 00 00 00 
              00       result  SPACE            4
  295 0000001C         
  296 0000001C         ;>>>>>   end variables here <<<<<
  297 0000001C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\exercise02.d -o.\objects\exercise02.o -IC:\Users\justin
\Downloads\Exercise03\RTE -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.7.0\Dev
ice\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predef
ine="__UVISION_VERSION SETA 516" --predefine="MKL46Z256xxx4 SETA 1" --list=.\li
stings\exercise02.lst Exercise02.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ENDF 00000048

Symbol: ENDF
   Definitions
      At line 108 in file Exercise02.s
   Uses
      At line 65 in file Exercise02.s
      At line 67 in file Exercise02.s
      At line 75 in file Exercise02.s
      At line 77 in file Exercise02.s
      At line 84 in file Exercise02.s
      At line 86 in file Exercise02.s
      At line 93 in file Exercise02.s
      At line 95 in file Exercise02.s
      At line 102 in file Exercise02.s
      At line 104 in file Exercise02.s

ENDG 0000007C

Symbol: ENDG
   Definitions
      At line 156 in file Exercise02.s
   Uses
      At line 133 in file Exercise02.s
      At line 136 in file Exercise02.s
      At line 142 in file Exercise02.s

ENDH 000000AE

Symbol: ENDH
   Definitions
      At line 205 in file Exercise02.s
   Uses
      At line 169 in file Exercise02.s
      At line 171 in file Exercise02.s
      At line 180 in file Exercise02.s
      At line 182 in file Exercise02.s
      At line 189 in file Exercise02.s
      At line 191 in file Exercise02.s
      At line 199 in file Exercise02.s
      At line 201 in file Exercise02.s

ENDRESULT 000000D4

Symbol: ENDRESULT
   Definitions
      At line 240 in file Exercise02.s
   Uses
      At line 225 in file Exercise02.s
      At line 227 in file Exercise02.s
      At line 234 in file Exercise02.s
      At line 236 in file Exercise02.s

MyCode 00000000

Symbol: MyCode
   Definitions
      At line 36 in file Exercise02.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: MyCode unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 39 in file Exercise02.s
   Uses
      At line 38 in file Exercise02.s
      At line 262 in file Exercise02.s

main 00000000

Symbol: main
   Definitions
      At line 40 in file Exercise02.s
   Uses
      None
Comment: main unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 255 in file Exercise02.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 259 in file Exercise02.s
   Uses
      At line 256 in file Exercise02.s
      At line 265 in file Exercise02.s

__Vectors_End 000000C0

Symbol: __Vectors_End
   Definitions
      At line 264 in file Exercise02.s
   Uses
      At line 257 in file Exercise02.s
      At line 265 in file Exercise02.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyConst 00000000

Symbol: MyConst
   Definitions
      At line 269 in file Exercise02.s
   Uses
      None
Comment: MyConst unused
const_F 00000000

Symbol: const_F
   Definitions
      At line 271 in file Exercise02.s
   Uses
      None
Comment: const_F unused
const_G 00000004

Symbol: const_G
   Definitions
      At line 272 in file Exercise02.s
   Uses
      None
Comment: const_G unused
const_H 00000008

Symbol: const_H
   Definitions
      At line 273 in file Exercise02.s
   Uses
      None
Comment: const_H unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x1FFFE000 00000000

Symbol: .ARM.__at_0x1FFFE000
   Definitions
      At line 276 in file Exercise02.s
   Uses
      None
Comment: .ARM.__at_0x1FFFE000 unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 282 in file Exercise02.s
   Uses
      None
Comment: Stack_Mem unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 283 in file Exercise02.s
   Uses
      At line 261 in file Exercise02.s
      At line 277 in file Exercise02.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

F 00000000

Symbol: F
   Definitions
      At line 288 in file Exercise02.s
   Uses
      At line 109 in file Exercise02.s
      At line 212 in file Exercise02.s

G 00000004

Symbol: G
   Definitions
      At line 289 in file Exercise02.s
   Uses
      At line 157 in file Exercise02.s
      At line 213 in file Exercise02.s

H 00000008

Symbol: H
   Definitions
      At line 290 in file Exercise02.s
   Uses
      At line 206 in file Exercise02.s
      At line 214 in file Exercise02.s

MyData 00000000

Symbol: MyData
   Definitions
      At line 286 in file Exercise02.s
   Uses
      None
Comment: MyData unused
P 0000000C

Symbol: P
   Definitions
      At line 291 in file Exercise02.s
   Uses
      At line 45 in file Exercise02.s
Comment: P used once
Q 00000010

Symbol: Q
   Definitions
      At line 292 in file Exercise02.s
   Uses
      At line 46 in file Exercise02.s
Comment: Q used once
R 00000014

Symbol: R
   Definitions
      At line 293 in file Exercise02.s
   Uses
      At line 47 in file Exercise02.s
Comment: R used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

result 00000018

Symbol: result
   Definitions
      At line 294 in file Exercise02.s
   Uses
      At line 48 in file Exercise02.s
      At line 241 in file Exercise02.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

MULT2 00000001

Symbol: MULT2
   Definitions
      At line 27 in file Exercise02.s
   Uses
      At line 60 in file Exercise02.s
      At line 69 in file Exercise02.s
      At line 125 in file Exercise02.s
      At line 148 in file Exercise02.s
      At line 164 in file Exercise02.s

MULT4 00000002

Symbol: MULT4
   Definitions
      At line 28 in file Exercise02.s
   Uses
      At line 120 in file Exercise02.s
      At line 124 in file Exercise02.s
      At line 144 in file Exercise02.s
      At line 147 in file Exercise02.s

SHIFT24 00000018

Symbol: SHIFT24
   Definitions
      At line 29 in file Exercise02.s
   Uses
      At line 128 in file Exercise02.s
      At line 129 in file Exercise02.s
      At line 130 in file Exercise02.s
      At line 140 in file Exercise02.s

SSTACK_SIZE 00000100

Symbol: SSTACK_SIZE
   Definitions
      At line 32 in file Exercise02.s
   Uses
      At line 282 in file Exercise02.s
Comment: SSTACK_SIZE used once
VECTOR_SIZE 00000004

Symbol: VECTOR_SIZE
   Definitions
      At line 23 in file Exercise02.s
   Uses
      At line 263 in file Exercise02.s
Comment: VECTOR_SIZE used once
VECTOR_TABLE_SIZE 000000C0

Symbol: VECTOR_TABLE_SIZE
   Definitions
      At line 22 in file Exercise02.s
   Uses
      At line 263 in file Exercise02.s
Comment: VECTOR_TABLE_SIZE used once
__Vectors_Size 000000C0



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: __Vectors_Size
   Definitions
      At line 265 in file Exercise02.s
   Uses
      At line 258 in file Exercise02.s
Comment: __Vectors_Size used once
7 symbols
367 symbols in table
